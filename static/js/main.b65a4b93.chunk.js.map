{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","textValue","settextValue","countedCharacters","setcountedCharacters","countedWords","setcountedWords","countedSpaces","setcountedSpaces","x","bodyWhiteTheme","bodyTheme","setbodyTheme","titleContainerWhiteTheme","titleContainerTheme","settitleContainerTheme","textContainerWhiteTheme","textContainerTheme","settextContainerTheme","counterContainerWhiteTheme","counterContainerTheme","setcounterContainerTheme","countingPartTheme","setcountingPartTheme","id","style","className","onClick","themeCheck","bodyDarkTheme","titleContainerDarkTheme","textContainerDarkTheme","counterContainerDarkTheme","countingPartDarkTheme","countingPartWhiteTheme","fontSize","position","top","transform","float","cursor","name","maxLength","placeholder","value","onKeyUp","e","target","includes","temp","replace","length","wordCount","split","spaceCount","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b65a4b93.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\";\nimport Brightness4RoundedIcon from '@material-ui/icons/Brightness4Rounded';\nimport x from \"./darkTheme.json\";\n\nfunction App() {\n  const [textValue, settextValue] = useState(\"\");\n  const [countedCharacters, setcountedCharacters] = useState(\"0\");\n  const [countedWords, setcountedWords] = useState(\"0\");\n  const [countedSpaces, setcountedSpaces] = useState(\"0\");\n\n  //Application theme\n  const [bodyTheme, setbodyTheme] = useState(x.bodyWhiteTheme);\n  const [titleContainerTheme, settitleContainerTheme] = useState(x.titleContainerWhiteTheme);\n  const [textContainerTheme, settextContainerTheme] = useState(x.textContainerWhiteTheme);\n  const [counterContainerTheme, setcounterContainerTheme] = useState(x.counterContainerWhiteTheme);\n  const [countingPartTheme, setcountingPartTheme] = useState(x.countingPartTheme);\n\n  const call2 = (e) => {\n    if (e.target.value === \"\") {\n      setcountedCharacters(\"0\");\n      setcountedWords(\"0\");\n      setcountedSpaces(\"0\");\n    } else {\n      if (e.target.value.includes(\"\\n\")) {\n        let temp = e.target.value.replace(/\\n/g, \"\");\n        setcountedCharacters(temp.length);\n      } else {\n        setcountedCharacters(e.target.value.length);\n      }\n      if (e.target.value.includes(\"(\")) {\n        let temp = e.target.value.replace(/\\(/g, \"\");\n        let wordCount = temp.split(/\\s\\w+/);\n        setcountedWords(wordCount.length);\n      } else if (e.target.value.includes(\"{\")) {\n        let temp = e.target.value.replace(/\\{/g, \"\");\n        let wordCount = temp.split(/\\s\\w+/);\n        setcountedWords(wordCount.length);\n      } else if (e.target.value.includes(\"[\")) {\n        let temp = e.target.value.replace(/\\[/g, \"\");\n        let wordCount = temp.split(/\\s\\w+/);\n        setcountedWords(wordCount.length);\n      }\n      else {\n        let wordCount = e.target.value.split(/\\s\\w+/);\n        setcountedWords(wordCount.length);\n      }\n      let spaceCount = e.target.value.split(\" \");\n      setcountedSpaces(spaceCount.length - 1);\n    }\n  }\n\n  const darkTheme = () => {\n    if (x.themeCheck === \"true\") {\n      setbodyTheme(x.bodyDarkTheme);\n      settitleContainerTheme(x.titleContainerDarkTheme);\n      settextContainerTheme(x.textContainerDarkTheme);\n      setcounterContainerTheme(x.counterContainerDarkTheme);\n      setcountingPartTheme(x.countingPartDarkTheme)\n      x.themeCheck = \"false\";\n    } else {\n      setbodyTheme(x.bodyWhiteTheme);\n      settitleContainerTheme(x.titleContainerWhiteTheme);\n      settextContainerTheme(x.textContainerWhiteTheme);\n      setcounterContainerTheme(x.counterContainerWhiteTheme);\n      setcountingPartTheme(x.countingPartWhiteTheme);\n      x.themeCheck = \"true\";\n    }\n  }\n\n  return (\n    <div id=\"mainDivision\" style={bodyTheme}>\n      <div className=\"container\">\n        <div id=\"titleContainer\" style={titleContainerTheme} className=\"row my-lg-2\">\n          <div className=\"col-8 col-lg-6\">\n            <p id=\"title\">Character Counter</p>\n          </div>\n          <div className=\"col-4 col-lg-6\">\n            < Brightness4RoundedIcon onClick={darkTheme} style={{ fontSize: 26, position: \"relative\", top: \"50%\", transform: \"translateY(-50%)\", float: \"right\", cursor: \"pointer\" }} />\n          </div>\n        </div>\n        <div id=\"textArea\" className=\"row my-4 my-lg-5\">\n          <div id=\"textContainer\" className=\"col-10 mx-auto\" style={textContainerTheme}>\n            <textarea id=\"textAreaValue\" style={textContainerTheme} name=\"text\" maxLength=\"1000\" placeholder=\"Start writing here...\" value={textValue} onKeyUp={call2} onChange={(e) => {\n              settextValue(e.target.value);\n            }}></textarea>\n            {/* <div id=\"text\" onClick={call} onKeyUp={call2} contentEditable=\"true\" suppressContentEditableWarning={true}>Start writing here...</div>  */}\n          </div>\n        </div>\n        <div id=\"characterCountRow\" className=\"row my-lg-5\">\n          <div className=\"col-12 col-sm-10 mx-auto \">\n            <div className=\"row\">\n              <div className=\"col-6 col-sm-4 my-1 mx-auto\">\n                <div className=\"counterContainer\" style={counterContainerTheme}>Characters<span className=\"countingPart\" id=\"countedCharacters\" style={countingPartTheme}>{countedCharacters}</span></div>\n              </div>\n              <div className=\"col-6 col-sm-4 my-1 mx-auto\">\n                <div className=\"counterContainer\" style={counterContainerTheme}>Words<span className=\"countingPart\" id=\"countedWords\" style={countingPartTheme}>{countedWords}</span></div>\n              </div>\n              <div className=\"col-6 col-sm-4 my-1 mx-auto\">\n                <div className=\"counterContainer\" style={counterContainerTheme}>Spaces<span className=\"countingPart\" id=\"countedSpaces\" style={countingPartTheme}>{countedSpaces}</span></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}